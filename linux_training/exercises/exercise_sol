########################################################################
# All exercises below do as interactive work in linux shell
# Define linux command calls to perform the isntructions below 
########################################################################


########################################################################
# 1. Get some info
#     -username      - whoami
#     -hostname      - hostname or $HOSTNAME 
#     -current shell - $SHELL 
#     -date/time     - date 
#     -date as "day-month-year"  - date +%d-%m-%y (date +%D - returns in month/day/year format)
#     -date as seconds only      - date +%s (date +%S returns current second)
#     -current directory         - pwd 
#     -content of your home directory  - ls -a ~
#     -existence of the file named ".bashrc" in your home directory  - ls -a .bashrc  (ls .bashrc)
#     -get statistics of your .bashrc file   - ls -al .bashrc 
#     -how many chars/words/lines are in your .bashrc file    - wc .bashrc 
#     -how many hidden items (files, dirs, ...) do you have in your home   - ls -ad .[^.]* | wc  (find ~ -name ".[^.]*" | wc )
#     -how many hidden directories do you have in your home                - find ~ -type d -name ".[^.]*" | wc 

#########################################################################
# 2. Create/Copy/Edit 
#    -go to your home dir       - cd ~ 
#    -remove the dir named "training"  independently from existence - rm -rf training 
#    -create a dir "training"                                       - mkdir training 
#    -copy all content of "practice" under  the dir "training"      - cp -r practice training 
#    -go to "training/practice/tasks1" dir                          - cd  training/practice/tasks1
#    -remove files with the extension xml, csv, and log             - rm  *.xml *.csv *.log 
#    -remove all files with the name starting with "ba"             - rm  ba*
#    -make all files executable                                     - chmod -R +x *  
#    -remove all content of "training" dir                          - cd ../; rm -rf training  
#    -create a new file named "hello.txt" with the content "Hello World !"  - echo "Hello World !" > hello.txt 
#    -copy all content of "practice" dir under the "training"      - cp -r linux_intro/training/practice training 
#    -list the content of "practice/tasks1"  directory with human-readable file size and sorted by last modified  - ls -lht practice/tasks1 
#    -list the content of "practice/tasks1"  directory with human-readable file size, sorted by last modified without group nor owner- ls -hgGt practice/tasks1
#    -list the content of "practice/tasks1"  folder by separating entries by comma and in reverse order  -ls -mr practice/tasks1
#    -list the content of "practice/tasks1"  directory in a single column by file extension              - ls -1x practice/tasks1
#    -list all hidden files in "practice/tasks2/taskdir"  directory         
#    -get the length of the longest line in "tasks1/people.csv" file                                     - wc -L tasks1/people.csv  
#    -rename all "*.pdf" files under "task1" dir to "*.pdf_backup"                                       - (find  practice/tasks1 -name "*.pdf" -exec mv {} {}_backup \; 
#    -transfer the "practice/tasks2/taskdir/dir1" directory into "practice/tasks2/taskdir/sw"            - mv practice/tasks2/taskdir/dir1 practice/tasks2/taskdir/sw
#    - display the list of all users in a system registered in /etc/passwd file and their login shell    - cut -d ':' -f1,7 /etc/passwd 


#    - display the content of /etc/host.conf and /etc/netconfig files with numbered lines    - cat -n /etc/host.conf /etc/netconfig 
#    - get the count of users from the /etc/passwd                                           - wc -l /etc/passwd      
#    - print the length of the longest line in /etc/passwd                                   - wc -L /etc/passwd  
#    - display the first 10 lines of /etc/passwd and /etc/netconfig lines                    - head /etc/passwd /etc/netconfig 
#    - display the last 3 lines of /etc/netconfig and /etc/passwd files                      - tail -n 3 /etc/netconfig /etc/passwd 
#    - create "project/scripts/python" and "project/assets/images" directories under "trainings" directory  - mkdir -p projects/scripts/python peojects/assets/images 
#    - create "project/scripts/python/test.py" and "project/assets/images/image.png" files     - touch projects/sxripts/python/test.py project/assets/images/image.png 
#    - go to "scripts" directory and rename "test.py" to "script.py"  - cd scripts; mv test.py sript.py 
#    - rename "images" directory to "icons"                           - mv ../assets/images ../assets/icons
#    - get the current folder name and its' path                      - basename `pwd`; dirname `pwd` 
#    - delete images.png file and scripts folder                      - cd ../; rm -rf sripts assets/icons/images.png 
#    - remove project directory                                       - rm -r project 
#
#
# 3. Permissions/access 
#   
#   -create "tmp" directory and "tmp/txt" file under "trainings" directory   - mkdir tmp; touch tmp/txt 
#   -get permissions of "tmp" folder and "txt" file inside the latter        - ls -l tmp; 
#   -grant "txt" file write permission for other users                       - chmod o+x tmp/txt; chmod 646
#   -leave only read access for "tmp" dir for all users                      - chmod -wx tmp; chmod 444 tmp
#   -create "txt1" file inside "tmp" folder                                  - touch tmp/txt1 ------> permission issue  
#   -add execute permission to "tmp" folder for owner                        - chmod u+x tmp; chmod 544 tmp 
#   -create "txt2" file inside "tmp" folder                                  - touch tmp/txt2 
#   -open all permissions for "tmp" folder and its content                   - chmod -R 777  tmp    
#   
# 
#
# 4. Find 
#   - get all items in the directory "training"      - find training -name "*"
#   - get all subdirectories in "training" dir       - find training -type d -name "*" 
#   - get subdirectories named "path"                - find training -type d -name "path"
#   - get all files                                  - find training -type f -name "*"
#   - get all filed named "setup"                    - find training -type f -name "setup"
#   - create a copy of all files named "setup" as "setup_tst.bak"         - find . -type f -name "setup"  -exec cp {} {}_tst.bak \;
#   - rename all "*.pdf" files under "practice/tasks1" to "*.pdf_backup"  - find practice/tasks1 -type f -name "*.pdf" -exec mv {} {}_pdf.backup \;
#   - remove all subdirectories named "path"                              - find . -type d -name "path" -exec rm -rf {} \;
#   - remove all files named "setup"                                      - find . -type f -name "setup" -exec rm -rf {} \; (find . -type f -name "setup" | xargs rm -rf ) 
#
#
# 5. Grep 
#  - get all lines from "practice/grepdata.txt"  containing phone numbere with an extension (x or X followed by 4 digit number)
#        grep -i     "x[0-9][0-9][0-9][0-9]" practice/tasks1/grepdata.txt (solution based on already learned capabilities)
#        grep -iE    "x[0-9]{4}"             practice/tasks1/grepdata.txt (regular expressions and extended grep will be addressed in scope of bash sessions)
#
#  - get all lines beginning with three digits and followed by space  grep "^[0-9][0-9][0-9] " practice/tasks1/grepdata.txt 
#                                                                     grep -E "^[0-9]{3} "     practice/tasks1/grepdata.txt 
#
#  - get all lines containing date                                    grep ", [0-9][0-9][0-9][0-9]"        practice/tasks1/grepdata.txt
#                                                                     grep -E ", [0-9]{4}"                 practice/tasks1/grepdata.txt  
#  - get all lines not beginning with capital "S"                     
#                                 grep "^[^S]" practice/tasks1/grepdata.txt
#  - get all lines containing "CA" independently on case 
#                                 grep -i "ca" practice/tasks1/grepdata.txt
#  - get all lines with e-mail addresses    
#                                 grep "@"     practice/tasks1/grepdata.txt 
#  - get all lines cotaining "de" as a complete word 
#                                 grep -w "de"     practice/tasks1/grepdata.txt
#                                 grep    " de "   practice/tasks1/grepdata.txt (can be considered as a workaround solution) 
#
#  - get all lines not containing the word "Sep."
#                                 grep -v "Sep."   prqactice/tasks1/grepdata.txt 
# 
# 6. Mix 
#  - unpack "tasks2.tar.gz" under the/into "workdir" directory 
#                           mkdir workdir; tar -xzvf tasks2.tar.gz  -C workdir 
#
#  - get the count of directories under the "sw" folder containing "cst" in the name
#                           ls -d sw/*cst* | wc -l 
#
#  - get the largest directory inside the "sw" folder, print in "<full_path>: <largest_dir_name>" format
#                           a=`du -sw/* | sort -n -r | head -n 1 | cut -f'2'`; echo "`pwd`/$a     `basename $a`"                           
#
#  - using "a" and "b" variables assigned to "cell_names.sh" and "techlib.tcl" values correspondingly (a="cell_names.sh" and b="techlib.tcl") form new filename called "techlib_names.sh"
#                            a="cell_names.sh";   b="techlib.tcl";  
#                            filename=${b%.*};    extension=${a#*_}; echo "${filename}_${extension}"
#
#  - find "dirn2" directory and make it removable for owner only
#                            find  . -type d -name dirn2 -exec chmod +t {} \;
#                            find  . -type d -name dirn2 -exec chmod 1755 {} \;
#
#  - copy "link_dir" to "cp_dir" by traversing all simlinks into directories 
#                            cp -rL link_dir  cp_dir           
#
#  - remove all empty files within the tasks2 tree 
#                           find ~/training/practice/workdir/tasks2 -type f -empty -print -delete
#
#  - remove all empty files from the current folder only
#                           find .  -maxdepth 1 -type d -empty -print -delete 
#
#
#  - go to physical directory to which the "link_dir/tst_small" points to
#                           cd -P link_dir/tst_small  
#
#  - get filesize and filename pairs (up to second level including links and sizes of all subdirectories) from biggest to smallest into "file_size_list" file
#                          du -aL --max-depth=2 . | sort -k1 -rn  > file_size_list 
#
#  - merge "Xor.t_o_o.only" & "Xor.t_o_o_only.prop files from "tst" directory into dingle file called "xor.log". Multiple empty lines should be replaced with the single empty line in the resulting file 
#                          cd tst; cat -s Xor.t_o_o.only Xor.t_o_o_only.prop > xor.log 
#
#  - print the resulting "xor.log" file's size at the end of the latter 
#                          du -sh xor.log >> xor.log  
#
#  - get lines matching "DDR" pattern from "tst/dir2/summary_report" in <line_number>: <matched_text> format; print the number of occurence of "S08" among the latter   
#                          grep -n "DDR" tst/dir2/summary_report | grep -c "S08"
#
#  
#  - find all directories with 755 pemrissions under "taskdir" and provide write access to the group
#                         find taskdir -type d -perm 755 -print -exec chmod 775 {} \; 
#                         find taskdir -type d -perm 755 -print -exec chmod g+w {} \; 
#
#  - calculate and display the disk usage of all files and directories under "taskdir" folder except the ones with "tcl" extension; write output into the file called "-abc.txt
#                         du -ah --exclude="*.tcl" taskdir > -abc.txt 
#  
#  - get content between the 10th and 20th lines inclusively from "-abc.txt"
#                         tail -n +10 ./-abc.txt | head -n 10 
#
#  - copy "path" folder from "sw/sw_all1x/golden" into "tsty", "tst1", "tst_small" folders using single copy statement 
#                         echo ./tst ./tst1 ./tst_small | xargs -n 1 cp -r -v sw/sw_all1x/golden/path  
#
#
#  - get all files containing "summary" in the name and archieve them
#                         find . -name "*summary*"  -type f | xargs tar -cvf summaries.tar  
#
#
#
#   get all files from "dir1/dirn2" directory with the names starting with "s" followed by any of the characters "a", "b", "d", "c", "I", "o" and ending with "st.sh"
#          ls dir1/dirn2/"s[abcdIo]*st.sh" 
#          find dir1/dirn2 -name "s[abcdIo]*st.sh" 
#
#  - get all files from "dir1/dirn2" starting with any two characters followed by "st" and ending with one or more occurences of any character
#          ls dir1/dirn2/"??st*"  
#          find dir1/dirn2 -name "??st*" 
#
#- get all files from "dir1/dirn2" starting with either "l" or "s" characters not followed by one "i", "b" or "o", followed by any single character, followed by "t" and any other character afterwerd
#                    ls dir1/dirn2/"[ls][!ibo]?t*"
#                    find dir1/dirn2 -name "[ls][^ibo]?t*"
