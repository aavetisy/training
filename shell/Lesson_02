##########################################################################################################
# Processes
#    - every program runs as a process.
#    - processes can be background and foreground (difference - interaction with the terminal).
#    - processes can be parent and child
#    - each process has a five digit ID number (pid or process ID). pid is unique.
#    ==================================================================================================
#    Process states: Creation -> Ready <---> Run -> Finish
#                                 |<--Wait<--|
#    Ready - wait for (e.g.) processor resources for continue, Wait - for any IO
#    ==================================================================================================
#    Commands to obtain processes information - ps and top.
#    ps is useful in scripts. top (or htop) is convinient at interactive work.
#    ==================================================================================================
#      ps -a     processes in current terminal (shell)
#      ps -e     all processes
#      ps -f     full-format listing. Used with -L, the NLWP (number of threads) and LWP (thread ID)
#                columns will be added.
#      ps -l     long format.
#    ==================================================================================================
#      ps -elf and ps ax (BSD-style options)) Columns:
#        F         Flags. Vendor-specific info. E.g.
#                  1    forked but didnâ€™t exec
#                  4    used super-user privileges
#        S         Process state codes
#                  D    Uninterruptible sleep (usually IO)
#                  R    Running or runnable (on run queue)
#                  S    Interruptible sleep (waiting for an event to complete)
#                  T    Stopped, either by a job control signal or because it is being traced.
#                  Z    Defunct ("zombie") process, terminated but not reaped by its parent.
#        UID       process owner username
#        PID       process ID
#        PPID      parent process ID
#        C         CPU usage and scheduling information 
#        PRI       process priority
#        NI        nice value (from 19 (nicest) to -20 (not nice to others)).
#        ADDR      memory address of the process
#        SZ        virtual memory usage
#        WCHAN     memory address of the event the process is waiting for 
#        STIME     process start time
#        TTY       terminal associated with the process
#        TIME      total CPU usage
#        CMD       process name (including arguments, if any)
# 
#    For BSD formats and when the stat keyword is used, additional characters may be displayed:
#       <    high-priority (not nice to other users)
#       N    low-priority (nice to other users)
#       L    has pages locked into memory (for real-time and custom IO)
#       s    is a session leader
#       l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
#       +    is in the foreground process group
##########################################################################################################
# Starting Processes
#      Foreground is default for processes. It gets its input from the keyboard and sends its output
#           to the screen. While foreground process is running, no other command can be started. 
#      Background process is starting by adding an ampersand (&) at the end of the command. It runs
#           without being connected to your keyboard. If the background process requires any keyboard
#           input, it waits.
#           Example: "bg_needs_io &" - background process that require I/O
#                    "endless &"     - background process still connected to terminal.
##########################################################################################################
# Listing Running Processes (jobs or jobs -l)
#       jobs command - shows the processes you have suspended and the ones running in the background.
#                      current job is always flagged with a +, and the previous job with a -. E.g. 
#                       > jobs
#                         [1]   Stopped          prog1
#                         [2]   Running          prog2
#                         [3]-  Stopped          prog3
#                         [4]+  Stopped          prog4
#                         (In this case fg with no args will bring to the foreground prog4)
##########################################################################################################
# Moving a Foreground Process to the Background  (ex endless)
#      - ^Z - suspend the foreground process 
#      - bg command enables you to resume the suspended process in the background
#      - fg command returns it to the foreground.
##########################################################################################################
# Killing a Process. (endless_modified)
#   kill command send signals to processes. Processes listen for signals and terminate with
#   the corresponding to the signal method.
#
#   kill -l displays the list of signals. 
#   Some signals meanings:
#   1   SIGHUP    Hang up signal. Precesses can listen for this signal and act (or not act) upon it.
#   15  SIGTERM   Termination signal. Precesses can listen for this signal and act (or not act) upon it.
#                 This signal issued also by pressing CRTL-C. Default signal if no signal # specified.
#   9   SIGKILL   Kill signal. Immediate termination of the process by the Linux kernel.
##########################################################################################################
# nohup command is to prevent a bg process from terminating when you sign off or are disconnected.
##########################################################################################################
# Parent and Child Processes, Subshells  (ex "parentscript")
##########################################################################################################
