#!/bin/bash

if [ $# -ne 1 ]
then
  echo "Please specify example #"
  exit
fi

taskN=$1

case $taskN in 

##########################################################################################################################################
1)
##########################################################################################################################################
# Variable: defined as "name=value"
#      name  -  can contain only letters (a-zA-Z), numbers (0-9) or the underscore character (_).
#               Variable's name can start only with a letter or an underscore.
#      value -  any value you want.
# accessing values - by prefixing its name with the dollar sign ($).
#   Note: When referencing a variable, it is generally advisable to enclose its name in double quotes.
#         This prevents reinterpretation of all special characters within the quoted string, 
#         except $, ` (backquote), and \ (escape).
#         Use double quotes to prevent word splitting. An argument enclosed in double quotes presents
#         itself as a single word, even if it contains whitespace separators.

_1=orange               ; echo $_1
_2="apple"              ; echo $_2
fruites="plum grape"    ; echo $fruites

echo "============================================="

__juiceOrangeApple__="$_1 $_2"    ; echo $__juiceOrangeApple__
__juiceOrangeApple__='$_1 $_2'    ; echo $__juiceOrangeApple__
__juiceOrangeApple__="$_1 \$_2"   ; echo $__juiceOrangeApple__

echo "============================================="

a=1
b=2
ab=3456
fn=output

echo "$ab"
echo "${a}b"
echo $a$b
echo $fn.log
echo $fn/wdir.log
echo ${fn}/wdir.log

echo "============================================="
# declare (or typeset), declare -p, declare -p <varname>
declare -i x
x=12
echo $x

x=abc
echo $x

x=0xabc
echo $x

##########################################################################################################################################
;; 2)
##########################################################################################################################################
# Array Variables
#   one-dimensional indexed and associative array variables.
#   no max limit on the size of an array, nor any requirement that members be indexed or assigned contiguously.
#   Indexed arrays are referenced using integers (including arithmetic expressions) and are zero-based
#   Associative arrays use arbitrary strings. 
#     indirect declaration: 1.  name[index]=value
#                           2.  name=(value1 ... valuen)
#                           3.  name=([index]=value ...)  (mutual exclusive with p. 2)
#     explicit declaration  declare -a <array_name>
#
# Accessing Array Values
#                    1.  ${name[index]}   -  index'th value
#                    2.  ${name[*]} or ${name[@]}  -  all the items in an array
# ${#name[@]} - number of elements in array
# index is treated as an arithmetic expression >= 0

# Indexed array
declare -a fruite
fruite=(apple orange "" grape)
fruite[5]=peach
fruite[7]=plum

for i in "${!fruite[@]}"
do
  echo "index  : $i     value: ${fruite[$i]}"
done

# associative arrays
echo "============================================="

declare -A employee
employee[name]=Armen
employee[surname]=Ananikyan
employee[departement]=QA
employee[phone]=7103

for i in "${!employee[@]}"
do
  echo "key  : $i     value: ${employee[$i]}"
done

##########################################################################################################################################
;; 3)
##########################################################################################################################################
# Read-only Variables. unsetting variables

readonly PI=3.14159
#PI=4
#unset PI

echo "PI is $PI"

x=4
echo "x=$x"
unset x
echo "x=$x"


##########################################################################################################################################
;; 4)
##########################################################################################################################################
# Local Variables are present within the current shell and are not available to child shells.
# Environment Variables are available to any child shells.
# Shell Variables are set by the shell (e.g. PWD, UID, PATH, HOME, ...)

echo '#!/bin/sh'                           > childscript
echo 'echo "Child shell. Var value: $var"' >> childscript
chmod 755 childscript

var=15

# var is not visible in the child script
./childscript

# make var visible in the child script
export var
./childscript

# other way to make var visible in the child script using "declare -x <name>"
unset var
var=14

declare -x var
./childscript


echo "============================================="

myfunc_1()
{
  echo "x = $x"
}

myfunc_2()
{
  local x
  x=7
  echo "x = $x"
}

x=14
myfunc_1
myfunc_2

echo $x

##########################################################################################################################################
;; 5)
##########################################################################################################################################
# variables visibility in {} and () constructions

x=1
y=2

{
  x=15
  echo "In {}: x = $x , y = $y"
}
echo "After:  x = $x , y = $y"

echo "============================================="

x=1
y=2

(
  x=15
  echo "In (): x = $x , y = $y"
)
echo "After:  x = $x , y = $y"

echo "============================================="
# be careful at using {} blocks with pipes. In 
# this case variables changes will be lost out
# of {} block.
x=1
y=2

echo 3 | {
  read multiplier
  x=$(( $x * $multiplier ))
  y=$(( $y * $multiplier ))
  echo "In {}: x = $x , y = $y"
}

echo "After:  x = $x , y = $y"

##########################################################################################################################################
;; 6)
##########################################################################################################################################
# Filename substitution (globbing) is the process by which the shell expands a string containing
# wildcards into a list of filenames. (*, ? and [characters])

ls Le*
ls *_?3
ls *[32]
ls Lesson_?[1-3]*
ls Lesson_?[1-38-9]*

##########################################################################################################################################
;; 7)
##########################################################################################################################################
# indirect reference to the variable ( ${!varname} )

x=4
varname=x
echo $varname

value=${!varname}
echo $value

# other way (using eval, that takes its arguments, concatenates them separated by spaces,
#            and executes the resulting string as Bash code in the current environment.)
eval value=\$$varname
echo $value

##########################################################################################################################################
;; 8)
##########################################################################################################################################
# Value-based variable substitutions

# a) ${varname:<-|=|+>word}
#
# =========================================================================
#  varname    action   variable new value       returned value
#   undef       -         undef                   word 
#   defined     -         old value               old value
#   undef       =         word                    word
#   defined     =         old value               old value
#   undef       +         undef                   undef
#   defined     +         old value               word

# =================================================================================================
#  ${parameter:-word}
#      if(parameter == null | unset)  { return word }
#      else                           { return parameter }
# =================================================================================================

echo '----------------------------------------'
echo '${parameter:-word}'

unset x
z=${x:-'X was unset'}
echo "x=\"$x\" , z=\"$z\""

echo 

x="X-s initial value"
z=${x:-'X was set'}
echo "x=\"$x\" , z=\"$z\""

# =================================================================================================
#  ${parameter:=word}
#      if(parameter == null | unset) { parameter = word ; return parameter }
#      else                          { return parameter }
# =================================================================================================
echo '----------------------------------------'
echo '${parameter:=word}'

unset x
z=${x:='X was unset'}
z=${x:=$s}
echo "x=\"$x\", z=\"$z\""

echo 

x="X-s initial value"
z=${x:='X was set'}
echo "x=\"$x\" , z=\"$z\""

# =================================================================================================
#  ${parameter:+word}
#      if(parameter is set) { return word }
#      else                 { return parameter }
# =================================================================================================
echo '----------------------------------------'
echo '${parameter:+word}'

unset x
z=${x:+'X was unset'}
echo "x=\"$x\" , z=\"$z\""

echo

x="X-s initial value"
z=${x:+'X was set'}
echo "x=\"$x\" , z=\"$z\""

# =================================================================================================
# ${parameter:?message}
#      if(parameter == null | unset) { send message to stderr }
# =================================================================================================
echo '---------------------------------------- Message'
echo '${parameter:?message}'

unset x
#${x:?"x is unset or null"}

# =================================================================================================
# ${parameter:offset}
# ${parameter:offset:length}
#   Returns up to "length" characters of parameter starting at the "offset".
# =================================================================================================
echo '---------------------------------------- Substring'
echo '${parameter:offset:length}'

unset x
x="Hello World"
echo ${x:2}
echo ${x:2:5}

# =================================================================================================
# ${!prefix*}
# ${!prefix@}
#   Expands to the names of variables whose names begin with prefix, separated by the
#   first character of the IFS special variable (space).
#          IFS - The Internal Field Separator that is used for word splitting after expansion
#          and to split lines into words with the read builtin command.
#          The default value is <space><tab><newline>. 
# =================================================================================================
echo '---------------------------------------- Prefix'
echo '${!prefix@}'

x="Hello"
x1="World"
x2=" !!!"
xerox='HP'
var_x="1234"

for varname in "${!x*}"
do
  echo "=== $varname ==="
done

echo 

for varname in "${!x@}"
do
  echo "=== $varname ==="
#  eval value=\$$varname
#  value=${!varname}
#  echo "$varname = $value"
done

# =================================================================================================
# ${#parameter}
#   Return parameter length
# =================================================================================================
echo '---------------------------------------- Parameter length'
echo '${#parameter}'

x='Hello World !!!'
echo ${#x}

# =================================================================================================
# ${parameter%word}
# ${parameter%%word}
#     The word is expanded to produce a pattern just as in pathname expansion.
#     (deleted ‘%’ - shortest matching pattern, ‘%%’  - longest matching pattern)
# =================================================================================================
echo '---------------------------------------- Delete pattern'
echo '${parameter%%word}'

x="Hello World"
echo "${x%l*}"
echo "${x%%l*}"

echo

x=a.b.c.d.txt
echo "${x%.*}"
echo "${x%%.*}"

# =================================================================================================
# ${parameter/pattern/string}    Substituded the first match of pattern by string
# ${parameter//pattern/string}   Substituded all matches of pattern by string
# =================================================================================================
echo '---------------------------------------- Substitude'
echo '${parameter//pattern/string}'

x="Hello World"
echo "${x/l/L}"
echo "${x//l/L}"
echo "${x/Hello/Hi}"

echo "${x/e*/E}"
echo "${x//l[ld]/<deleted_by_moderator>}"

##########################################################################################################################################
;; 9)
##########################################################################################################################################
# Command substitution

mydate=`date`
echo $mydate

echo "============================================="

for fn in `ls -l`
do
  echo $fn
done

echo "============================================="
# other syntax - $(command)

echo $(date)

for fn in $(ls)
do
  echo $fn
done

##########################################################################################################################################
;; 10) 
# Arithmetic substitution
#     id++ id-- ++id --id                     variable post/pre-increment/decrement
#     ! ~                                     logical and bitwise negation
#     **                                      exponentiation
#     * / % + -                               multiplication, division, remainder, addition, subtraction
#     << >>                                   left and right bitwise shifts
#     <= >= < >                               comparison
#     == !=                                   equality and inequality
#     &  &&                                   bitwise and logical AND
#     |  ||                                   bitwise OR and logical OR
#     ^                                       bitwise XOR
#     expr ? expr : expr                      conditional operator 
#     = *= /= %= += -= <<= >>= &= ^= |=       assignment
#
# Numerical constants:
#   12   -   decimal
#   012  -   octal
#   0x12 -   hexadecimal
#   <base>#number   -  common case of any base. Examples:
#                                                 10#012    - decimal
#                                                 8#12      - octal
#                                                 16#bcde   - hexadecimal
#                                                 2#1001001 - binary
#                                                 345#78    - number on base 345 (7*345 + 8)
##########################################################################################################################################

# $((expression))
y=4
x=$(( (4 + ($y+2)*3)/5    ))
echo $x

# You may not use the preceding variable name "$" sign. E.g.
x=4
y=5
echo $(( $x + $y ))
# is the same as
echo $(( x + y ))

((x++))
echo $x

z=$((x++))
echo "$x $z"

echo "============================================="

# expr. Whitespaces between operands, "*", "(" and ")" should be backslash-ed
x=`expr \( 4 + \( $y + 2 \) \* 3 \) / 5 `
echo $x

echo "============================================="

# let
x=13
let x=x%3
let x=x+1
echo $x

# use quotes to permit whitespaces in the expression:
x=20
let "z = x + 14"
echo $z


##########################################################################################################################################
;; *) echo "Invalid task number" ; exit ;;
esac
