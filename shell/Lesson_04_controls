#!/bin/bash

##########################################################################################################################################
# Flow Control
# test
#      [-n] STRING                     the length of STRING is nonzero
#        -z STRING                     the length of STRING is zero
#      STRING1 = STRING2               the strings are equal
#      STRING1 != STRING2              the strings are not equal
#
#      INTEGER1 -eq INTEGER2           INTEGER1 is equal to INTEGER2
#      INTEGER1 -ge INTEGER2           INTEGER1 is greater than or equal to INTEGER2
#      INTEGER1 -gt INTEGER2           INTEGER1 is greater than INTEGER2
#      INTEGER1 -le INTEGER2           INTEGER1 is less than or equal to INTEGER2
#      INTEGER1 -lt INTEGER2           INTEGER1 is less than INTEGER2
#      INTEGER1 -ne INTEGER2           INTEGER1 is not equal to INTEGER2
#
#      -d FILE                         FILE exists and is a directory
#      -e FILE                         FILE exists
#      -f FILE                         FILE exists and is a regular file
#      -L FILE                         FILE exists and is a symbolic link
#      -r FILE                         FILE exists and is readable
#      -s FILE                         FILE exists and has a size greater than zero
#      -w FILE                         FILE exists and is writable
#      -x FILE                         FILE exists and is executable
#
#      ( EXPRESSION )                  EXPRESSION is true
#      ! EXPRESSION                    EXPRESSION is false
#      EXPRESSION1 -a EXPRESSION2      EXPRESSION1 and EXPRESSION2
#      EXPRESSION1 -o EXPRESSION2      EXPRESSION1 or EXPRESSION2
##########################################################################################################################################

if [ $# -ne 1 ]
then
  echo "Please specify example #"
  exit
fi
taskN=$1

case $taskN in 

##########################################################################################################################################
1)
##########################################################################################################################################
# if -> then -> elif -> then -> else -> fi

if test 5 -gt 4
then
  echo "5 > 4"
fi

test 5 -gt 4
if [ $? -eq 0 ]
then
  echo "5 > 4"
fi

if [ 5 -gt 4 ]
then
  echo "5 > 4"
fi

[ 5 -lt 4 ]
if [ $? -eq 0 ]
then
  echo "5 > 4"
fi

read var
if [ $var -lt 5 ]
then
  echo "$var < 5"
elif [ $var -gt 10 ]
then
  echo "$var > 10"
else
  echo "5 <= $var <= 10"
fi

##########################################################################################################################################
;; 2)
##########################################################################################################################################
unset name

if [ -z $name ]
then
  echo "Variable \"name\" is not set."
else
  echo "name = $name"
fi

name=""
if [ -z $name ]
then
  echo "Variable \"name\" is not set."
else
  echo "name = $name"
fi

name="Hello World"
if [ -z "$name" ]
then
  echo "Variable \"name\" is not set."
else
  echo "name = $name"
fi

name=0
if [ "$name" ]
then
  echo "name = $name"
else
  echo "Variable \"name\" is not set."
fi

##########################################################################################################################################
;; 3)
##########################################################################################################################################
if [ ! "Hello World" = "hello World" ]
then
 echo "Strings are not equal"
fi

##########################################################################################################################################
;; 4)
##########################################################################################################################################
if [ ! -f Lesson_04 ]
then
  echo "Lesson_04 - no such file."
fi

if [ ! -d nodir ]
then
  echo "nodir - is not a directory."
fi

##########################################################################################################################################
;; 5)
##########################################################################################################################################
x=4
y=5
z=6

if [ $x -lt $y -a $y -lt $z ]
then
  echo "$y is between $x and $z"
fi

if [ $x -lt $y ] && [ $y -lt $z ]
then
  echo "$y is between $x and $z"
fi

##########################################################################################################################################
;; 6)
##########################################################################################################################################
# case statement

option=-filter

case $option in
  -filter)
    echo "Selected option: -filter"
  ;;
  -fi??)
    echo "Selected option: $option"
  ;;
  -o | -out | -output )
    echo "Selected option: -output"
  ;;
  *)
    echo "Selected other option."
  ;;
esac

echo "---------------------------------------"

read var
case $var in
  dev[123])
    echo "telnet amy-$var.amy.mentorg.com" ;;
  cal)
    echo "telnet calamy.wv.mentorg.com" ;;
  *)
    echo "Invalid hostname" ;;
esac

##########################################################################################################################################
;; 7)
##########################################################################################################################################
# while loop

x=0
while [ $x -lt 10 ]
do
  y=0
  while [ $y -lt $x ]
  do
    echo -n "$y "
    let y=y+1
  done
  echo
  let x=x+1
done

##########################################################################################################################################
;; 8)
##########################################################################################################################################
# until loop

x=0
until [ $x -ge 10 ]
do
  y=0
  until [ $y -ge $x ]
  do
    echo -n "$y "
    let y=y+1
  done
  echo
#  let x=x+1
  ((x++))
done


##########################################################################################################################################
;; 9)
##########################################################################################################################################
# for loop

for (( i = 0 ; i < 20 ; i++ ))
do
  echo $i
done

echo ===========================================

cntr_neg=0
cntr_zero=0
cntr_pos=0

for var in 12 24 0 -23 3 0 -45 45
do
  if [ $var -lt 0 ]
  then
    cntr_neg=$(( $cntr_neg + 1 ))
  elif [ $var -eq 0 ]
  then
    cntr_zero=$(( $cntr_zero + 1 ))
  else
    cntr_pos=$(( $cntr_pos + 1 ))
  fi
done

echo "$cntr_neg numbers are negative, $cntr_zero are zero and $cntr_pos are positive."

echo ===========================================

for var in {3..9}
do
  echo $var
done

echo ===========================================

for var in {a..f}
do
  echo $var
done

##########################################################################################################################################
;; 10)
##########################################################################################################################################
# select loop

select fruit in apple orange plum grape none
do
  if [ "$fruit" = "none" ]
  then
    break
  fi
  echo $fruit
done

##########################################################################################################################################
;; 11)
##########################################################################################################################################
# break, continue

x=0
while [ 1 ]
do
  echo $x
  x=$(( $x + 1 ))
  if [ $x -eq 10 ]
  then
    break
  fi
done

echo "============================================="

cntr_neg=0
cntr_zero=0
cntr_pos=0

for var in 12 24 0 -23 3 0 -45 45
do
  if [ $var -lt 0 ]
  then
    cntr_neg=$(( $cntr_neg + 1 ))
    continue
  fi

  if [ $var -eq 0 ]
  then
    cntr_zero=$(( $cntr_zero + 1 ))
    continue
  fi

  cntr_pos=$(( $cntr_pos + 1 ))
done

echo "$cntr_neg numbers are negative, $cntr_zero are zero and $cntr_pos are positive."


##########################################################################################################################################
;; *) echo "Invalid task number" ; exit ;;
esac
