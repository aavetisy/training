###################################################################################################################
# read fruit name from stdin
# print "I like <fruite_name>s"
#   example: > apple
#            > I like apples

#!/bin/bash

read fruite_name
echo "I like ${fruite_name}"
###################################################################################################################
# read integer from stdin
# print square and cube values
#   example: > 3
#            > Value: 3  Square: 9  Cube: 27

#!/bin/bash

declare -i number
read number
echo -n "Value: ${number} "
echo -n "Square: $(( number**2 )) "
echo "Cube: $(( number**3 ))"

###################################################################################################################
# define 3 integer values (e.g. a, b, c)
# print the value of expression (b*b - 4*a*c)

#!/bin/bash
a=2
b=3
c=5
value=$(( b*b-4*a*c ))
echo "The value of (b*b - 4*a*c) expression: ${value}"

###################################################################################################################
# define 2 integer values (e.g. x, y)
# print quotient and remainder of x/y division

#!/bin/bash
x=9
y=4
echo "Quotient of x/y division: $(( x/y ))"
echo "Remainder of x/y division $(( x%y ))"
###################################################################################################################
# read your first and last names into various vars.
# print "I am <first name> <last name>." (including point at the end of sentence).

#!/bin/bash

read -p "Enter your first name: " FNAME
read -p "Enter your last name: " LNAME

echo "I am ${FNAME} $LNAME."

###################################################################################################################
# define an indexed array variable as ("zero", "one", "two", ..., " nine")
# read integer from stdin
# print corresponding name
#   example: > 3
#            > three

#!/bin/bash
NUMBERS=("zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine")

declare -i num
read -p "Enter an integer beetwen 0 and 9: " num

if [ ${num} -ge 0 ] && [ ${num} -le 9 ]; then
    echo "${NUMBERS[$num]}"
else
    echo "Invalid number"
fi

###################################################################################################################
# define an associative array as "4-digit-phone-number" -> "name" pairs.
# read phone number from stdin
# print corresponding name

#!/bin/bash

declare -A PHONE_NUMBERS
PHONE_NUMBERS[1231]=name1
PHONE_NUMBERS[1232]=name2
PHONE_NUMBERS[1233]=name3
PHONE_NUMBERS[1234]=name4
PHONE_NUMBERS[1235]=name5

read -p "Enter a phone number: " phone
name=${PHONE_NUMBERS[$phone]}
if [ -n "${name}" ]; then
    echo "$name"
else
    echo "The phone number not found"
fi
###################################################################################################################
# print value of 'STATUS' variable only if it is defined

#!/bin/bash
if [ -n "${STATUS}" ]; then
    echo ${STATUS}
fi
###################################################################################################################
# set any variable value to the current date.
# print month name only

#!/bin/bash

VAR=`date`
echo $VAR | cut -d' ' -f 2

###################################################################################################################
# read name from stdin
# print name's length

#!/bin/bash

read -p "Enter your name" NAME
echo "Name's length is: ${#NAME}"

###################################################################################################################
# read number from stdin
# print "Passed" if number>2 and number <8, and print "Failed" in other cases otherwise
# It is needed:
#   a) solution with if->else
#   b) solution without  if->else

#####   Solution a
#!/bin/bash
declare -i number
read -p "Enter a number: " number
[ $number -gt 2 ] && [ $number -lt 8 ] && echo Passed || echo Failed

#####   Solution b
declare -i number
read -p "Enter a number: " number
if [ $number -gt 2 ] && [ $number -lt 8 ] ; then
    echo "Passed"
else
    echo "Failed"
fi

###################################################################################################################
# Using a for loop, save lines 2-3 of each file in the docs folder as a new file with a name that
# looks like <originaal name>-copy.txt in a folder with a name like <originaal name>.
#----------------
# Content of docs folder: ls ./docs
# 			  echo  echo.txt  email  email.txt  onboarding
# Final results should be: ls ./docs
#			    docs/echo/echo-copy.txt
#			    docs/male/email-copy.txt
#			    docs/names/onboarding-copy.txt 

#!/bin/bash

for FILE in `ls ./docs/*`
do
    DIR_NAME=$(dirname $FILE)
    FILE_NAME=$(basename $FILE)
    NAME=${FILE_NAME%.*}
    NEW_DIR=$DIR_NAME/$NAME
    NEW_FILE=${NAME}-copy.txt
    mkdir -p $NEW_DIR
    cat $FILE | head -3 | tail -2  > $NEW_DIR/$NEW_FILE
done

###################################################################################################################
# Create a simple calculator that prompts the user to enter two integers and performs basic arithmetic operations such as addition,
# subtraction, multiplication and division.
# Hint: Use the "select" control
 
 #!/bin/bash
 select opt in add subtract multiply divide quit; do

    case $opt in
        add)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 + $n2 = $(($n1+$n2))"
            ;;
        subtract)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 - $n2 = $(($n1-$n2))"
            ;;
        multiply)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 * $n2 = $(($n1*$n2))"
            ;;
        divide)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 / $n2 = $(($n1/$n2))"
            ;;
        quit)
            break
            ;;
        *)
            echo "Invalid option $opt"
            ;;
    esac
done

