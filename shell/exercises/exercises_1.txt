#############################################################################################################
# script should take any number of arguments from the cmd line and print each arg with "Hello" in front.
# e.g. <script>  armen arthur anna
#      Hello armen
#      Hello arthur
#      Hello anna
#############################################################################################################
#!/bin/bash

for name in $@
do
    echo "Hello ${name}"
done

#############################################################################################################
# script should take two numbers from the cmd line and print all the numbers from the first to the
# second inclusive, each number separated only by a space from the previous number.
# e.g. <script>  3 7
#      3 4 5 6 7
#############################################################################################################
#!/bin/bash
for i in `seq $1 $2`
do
    echo -n "$i "
done

echo

#############################################################################################################
# script should print "Good morning",  "Good afternoon" or "Good evening" depending on the time of running.
# Hint: use the variable "date" below to analize:
#       date=`date "+%H"`
#############################################################################################################
#!/bin/bash

hour=`date "+%H"`
if [ "$hour" -ge 6 ] and [ "$hour" -lt 12 ]; then
    echo "Good morning"
elif [ "$hour" -ge 12 ] and [ "$hour" -lt 18 ]; then
    echo "Good afternoon"
else
    echo "Good evening"
fi

#############################################################################################################
# script should take number of seconds from the command line and convert it to the hours:minutes:seconds
# e.g. <script> 12345
#      12345 seconds in hours:minutes:seconds is 3:25:45
#############################################################################################################
#!/bin/bash

declare -i seconds
seconds=$1

hours=$(( seconds/3600 ))
min=$(( (seconds%3600)/60 ))
sec=$(( (seconds%3600)%60 ))

echo "${hours}:${min}:${sec}"

#############################################################################################################
# script should take <dirname> from the command line, check <dirname> doesn't exist and create <dirname>
#############################################################################################################
#!/bin/bash

DIRNAME=$1
if [ ! -d "${DIRNAME}" ]; then
    mkdir ${DIRNAME}
else
    echo "${DIRNAME} already exists"
fi

#############################################################################################################
# print sum of numbers received from the command line
#############################################################################################################
#!/bin/bash

sum=0
for i in $@
do
    sum=$(( sum+i ))
done

echo "sum of numbers is: ${sum}"

#############################################################################################################
# print max and min values of numbers received from the command line
#############################################################################################################
#!/bin/bash

max=$1
min=$1

for i in $@
do
    if [ "${i}" -gt "${max}" ]; then
        max=${i}
    fi
    
    if [ "${i}" -lt "${min}" ]; then
        min=${i}
    fi
done

echo "Maximum is: ${max}"
echo "Minimum is: ${min}"

#############################################################################################################
# print squares and cubes for the numbers from 0 to 50
# 0    0    0
# 1    1    1
# 2    4    8
# 3    9   27
# .............
# Hint: use
#    printf "%-10s%-10s%-10s\n" nmbr, square, cube
# for more nice output

#!/bin/bash
for i in {0..50}
do
    square=$(( i**2 ))
    cube=$(( i**3 ))
    printf "%-10s%-10s%-10s\n" $i $square $cube
done
#############################################################################################################

#############################################################################################################
# print the first 100 prime numbers.
#############################################################################################################
#!/bin/bash

# the first prime number is 1 
echo 1

count=1
number=2

until [ "$count" -gt 100 ]
do
    is_prime="yes"
    tmp=$(( number/2 ))
    for i in `seq 2 $tmp`
    do
        reminder=$(( number%i ))
        # not a prime number
        if [ "$reminder" -eq 0 ]; then
            is_prime="no"
            break
        fi
    done
    
    if [ "${is_prime}" = "yes" ]; then
        count=$(( count+1 ))
        echo $number
    fi

    number=$(( number+1 ))

done


#############################################################################################################
# script should copy given directory to the current directory with renaming all file/dir names which contain 
# "-" to "_"  (e.g.   test-file-1  ->  test_file_1)
#############################################################################################################
#!/bin/bash

source_dir=$1
# here should be a code for existance checking
dest_dir=`basename ${source_dir}`
dest_dir=${dest_dir//-/_}

mkdir ${dest_dir}
for i in `ls ${source_dir}`
do
    name=${i//-/_}
    cp -r ${source_dir}/${i} $dest_dir/${name}
done
#############################################################################################################
# take <dirname> from the command line (e.g. a/b/c/d/regdir), Check a/b/c/d/regdir exists
# check there is no the directory regdir in current diirectory. If yes - exit.
# create regdir in current diirectory
# find all files/subdirectories in a/b/c/d/regdir (Hint: use find a/b/c/d/regdir *)
# for each item:
#   - if item is directory - create directory with the same name in regdir
#   - if item is file - create corresponding link in regdir
# NOTE: the "training/linux_training/practice/tasks2/taskdir/dir1" can be used for testing
#############################################################################################################
if [ $# -ne 1 ]; then
    echo "Expected one argument" 
    exit 1
fi

SOURCE=$1
if [ ! -d "${SOURCE}" ]; then
    echo "the directory $SOURCE does not exists"
    exit 1
fi

DIRNAME=`basename ${SOURCE}`
if [ -d ./${DIRNAME} ]; then
    echo "./${DIRNAME} already exists."
    exit 1
fi

mkdir ${DIRNAME}

for i in $(find ${SOURCE} -name "*")
do
    NAME=${i/$SOURCE/}

    if [ -d ${i} ]; then
        mkdir -p ./${DIRNAME}/${NAME}
        continue
    fi

    if [ -f ${i} ]; then
        ln -sf ${i} ./${DIRNAME}/${NAME}
    fi
done

#############################################################################################################
# take 2 integers from stdin. Print max of them. Exit if 2 integers are same.
#############################################################################################################
#!/bin/bash
declare -i a
declare -i b

while [ 1 ]
do
    read -p "Enter the first number: " a
    read -p "Enter the second number:" b
    if [ "$a" -gt "$b" ]; then
        echo "Maximum is: $a"
    elif [ "$a" -lt "$b" ]; then
        echo "Maximum is: $b"
    else
        break
    fi
done

