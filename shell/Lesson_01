##########################################################################################################
# Linux is
#    - free
#        1. You don't have to pay to use this OS
#        2. when you get Linux you will also get source code of Linux, so you can modify Linux OS
#        3. it also offers many Free Software applications, programming languages, and development tools etc.
#    - Unix Like
#        UNIX history: 1964  -  MULTICS (Multiplexed Information and Computing System)
#                      1969  -  MULTICS -> UNIX  (for PDP, not portable)
#                      1970  -  UNIX rewritten in 'C' (portable)
#    - Open Source (under the GNU Public License). Under GPL the source code is available to anyone
#      who wants it, and can be freely modified, developed, and so forth. There are only a few
#      restrictions on the use of the code. If you make changes to the programs, you have to make
#      those changes available to everyone. This basically means you can't take the Linux source code,
#      make a few changes, and then sell your modified version without making the source code available.
#
# 1991  -  Linus Torvalds rewritten Minix (small version of Unix) as Linux.
##########################################################################################################
# Linux distributions
#    Red Hat Linux        http://www.redhat.com 
#    SuSE Linux           http://www.suse.com 
#    Mandrake Linux       http://www.mandrakesoft.com 
#    Caldera Linux        http://www.calderasystems.com 
#    Debian GNU/Linux     http://www.debian.org 
#    Slackware Linux      http://www.slackware.com 
##########################################################################################################
# Linux Kernel
#     - manages resources (e.g. memory, file management etc)
#     - decides who will use this resource, for how long and when
#     - runs your programs
#     - acts as an intermediary between the computer hardware and various programs/application/shell
# Kernel is Memory resident portion of Linux. It performance following tasks
#     - I/O management 
#     - Process management 
#     - Device management 
#     - File management 
#     - Memory management
##########################################################################################################
# Linux Shell
#    is an command language interpreter that executes commands read from the standard
#    input device (keyboard) or from a file.
#
#    Shell is not part of system kernel. It is a special program which accept your instructions
#    or commands and if it is a valid command, it passes to kernel.
#
#    BASH (Bourne-Again SHell)  Most common shell in Linux. It's Freeware shell.
#    CSH  (C SHell)             The C shell's syntax and usage are very similar to the C language
#    KSH  (Korn SHell)
#    TCSH                       TCSH is an enhanced but completely compatible version of the
#                               Berkeley UNIX C shell (CSH).
#
# to find out all available shells in your system
#    cat /etc/shells
# to find your current shell type following command
#    echo $SHELL
##########################################################################################################
# Init
#   - /etc/profile  -> $HOME/.bash_profile at login
#   - $HOME/.bashrc at new shell
##########################################################################################################
# Files/Directories
#    Regular Files
#    Symbolic Links
#    Device Files (Character special files  Block special files)
#    Named Pipes
#    Sockets
#    ls                       listing
#    cat, more, tail, head    viewing content
#    wc                       counting words
#    cp                       copy
#    mv                       rename, move
#    rm                       remove
#    cd                       change dir
#    pwd                      print working dir
#    ln                       creating links
#                             soft link
#                             Pros  - You can create symbolic links to almost all file system objects,
#                                     including files, directories, devices etc.
#                                   - Links can be created across file systems and even across disks or mounts.
#                                   - Easier to find what the file actually links to or what and where the original file was.
#                                     The link can be seen with the ls command.
#                                   - Ability to have separate or different metadata such as file permissions
#                                     for the symbolic link than the original file.
#                             Cons  - Deletion or moving the files causes the symlinks to break.
#                                   - Some softwares do not work with symlinks and requires an actual file.
#                                     This could also be for security reasons in some cases.
#
#                             hard link
#                             Pros  - Deleting the original file does not cause the link to break.
#                                   - No separate inode is required as it is shared between the link and the file.
#                                   - This is much more efficient than maintaining a different inode for the link object.
#                             Cons  - Cannot link across file systems. This is because each file system has its own
#                                     inode table.
#                                   - Cannot link directories easily again as the inode table entries are to be shared.
##########################################################################################################
# Permissions
#   chmod                    changing file and directory permissions
#   chown, chgrp             changing owners and groups
##########################################################################################################
# command <arg1> <arg2> ...
# kernel commands, uitilities, ...   (e.g. cd, export, ... and mkdir, rm, awk, sed, ...)
# commands options (short and long.  ls -al is the same as ls -a -l)
# man <command>
# commands divider in the same line is ;  (command1 ; command2 ; ...)
# comment sign - '#',  <cmd>  # comment    is legal
##########################################################################################################
# "#!" in executable files specifies an interpreter.
##########################################################################################################
